/********************************************************************/
/*                                                                  */
/* CDCLIP , Version 1.30                                            */
/* Author: Michel SUCH. Email: such.michel@wanadoo.fr               */
/*                                                                  */
/* using CDRECORD and CDDA2WAV.                                     */
/*                                                                  */
/* This program requires CDRECORD/2 installed on your machine       */
/*                                                                  */
/* CDRECORD/2 can be obtained on HOBBES: http://hobbes.nmsu.edu     */
/*                                                                  */
/* CDRECORD.EXE and CDDA2WAV.EXE must be located in a directory     */
/* defined in the path variable of the CONFIG.SYS file              */
/********************************************************************/

   parse arg parms
   call get_parms
   call presentation
   call init_prog
   call perform_copy
   if rc = 0 then do
     say ""
     say "Tracks clipped :" itrk
     call disk_duration
   end
exit rc


presentation:

  parse source . . me .
  progname = filespec('n', me)
  parse value(filespec('n', me)) with progname'.'.
   say progname "Version 1.30"
   say "Author: Michel SUCH, Email: such.michel@wanadoo.fr"
   say ""
   if trk.0 = 0 then do
     say "Syntax :" progname "track list"
     say "Examples:"
     say progname " 1 3 5"
     say "will grab tracks 1, 3 and 5."
     say progname " 1.5"
     say "will grab all tracks from 1 to 5."
     say progname " 5.1"
     say "will grab all tracks from 5 to 1."
     say progname " 1 3.5"
     say "will grab tracks 1, 3, 4 and 5"
     exit
   end
return /* presentation */


init_prog:

/*------------------- Init Rexxutil-----------------------------------*/
  If RXFUNCQUERY('SysLoadFuncs') Then Do
    Call rxfuncadd 'SysLoadFuncs', 'REXXUTIL', 'SYSLOADFUNCS'
    Call sysloadfuncs
  End

   /* Check if we have all appropriate programs */
   cdda2wav  = find_prog("cdda2wav2.EXE")
   if cdda2wav = '' then do
      cdda2wav  = find_prog("cdda2wav.EXE")
      if cdda2wav  = '' then do
         say "Cannot find program cdda2wav.EXE or cdda2wav2.EXE"
         exit 2
      end
   end

   cdrecord = find_prog("CDRECORD2.EXE")
   if cdrecord <> '' then cdrextra = cdrextra '-n'
   else do
      cdrecord = find_prog("CDRECORD.EXE")
      if cdrecord = '' then do
         say "Cannot find program CDRECORD.EXE or CDRECORD2.EXE"
         exit 2
      end
   end

   readcd = find_prog("readcd2.EXE")
   if readcd = '' then readcd = find_prog("readcd.EXE")
   if readcd = '' then do
     say "Cannot find program READCD.EXE or READcd2.EXE"
     exit 2
   end

   call get_devices(cdrecord)

   if cdrom.id = '' then do
     say "Cannot find CD-ROM unit"
     exit -2
   end
return /* init_prog */


get_parms:

  parms = expand_parms(parms)
  j = 0
  do i = 1 to words(parms)
    trk = word(parms, i)
    if datatype(trk) <> 'NUM' then do
      say "Invalid track number" trk
      exit
    end
    if (trk < 1) | (trk > 99) then do
      say "Track number" trk "out of range 1 99"
      exit
    end
    j = j + 1
    trk.j = trk
  end
  trk.0 = j
return /* get_parms */


expand_parms: procedure

  parse arg parms
  exp = ''
  do i = 1 to words(parms)
    parm = word(parms, i)
    parse var parm p1'.'p2
    select
      when p2 = '' then exp = exp parm
      when (datatype(p1) <> 'NUM') | (datatype(p2) <> 'NUM') then exp = exp parm
      when p1 = p2 then exp = exp p1
      when p1 < p2 then do j = p1 to p2
        exp = exp j
      end
      otherwise do j = p1 to p2 by -1
        exp = exp j
      end
    end /* select */
  end
return exp /* expand_parms */


perform_copy:

  call check_cd
  if rc <> 0 then return
  call renum_trks
  itrk = 0
  do i = 1 to trk.0
    trkname = get_trackname()
    wavname = trkname".wav"
    say "Extracting track" trk.i "to file" wavname
    "call" cdda2wav cdrom.id cdrom.speed "track="trk.i "-quiet",
    "-no-infofile -Owav" trkname "2>nul"
    if rc = 0 then do
      itrk = itrk + 1
      trkname.itrk = trkname
      say "Track duration:" trk_duration(stream(wavname, 'c', 'query size'))
    end
    else do
      ret = rc
      say "Error reading track" trk.i", erasing all extracted files"
      do j = 1 to itrk
        call sysfiledelete trkname.j".wav"
      end
      rc = ret
      return
    end
  end
return /* perform_copy */


check_cd:

  do forever
    "call" readcd cdrom.id "-fulltoc >nul 2>nul"
    select
      when rc = 0 then leave

      when rc = 255 then do
        call beep 440, 100
        say "Insert an audio cd in cd-rom unit"
        say "Press enter to continue, any other key to cancel"
        if sysgetkey("noecho") = '0d'x then iterate
        else do
          say "Clip cancelled"
          leave
        end
      end

      otherwise do
        say "Cannot read cd"
        leave
      end
    end /* select */
  end /* do forever */
return /* check_cd */


trk_duration: procedure

  parse arg sz
  sz = (sz - 44) / 176400
  parse value(sz/60) with min'.'.
  parse value(sz//60) with sec'.'dix
  sec = right(sec, 2, '0')
  if dix <> '' then sec = sec'.'left(dix, 2, 0)
return min':'sec /* trk_duration */


disk_duration:

  call sysfiletree 'cdclip??.wav', lst., "o"
  tim = 0
  do i = 1 to lst.0
    tim = tim + stream(lst.i, 'c', 'query size')
  end
  say "Total disc duration:" trk_duration(tim)
  say "Total tracks:" lst.0
return /* disk_duration */


renum_trks: procedure

  call sysfiletree "cdclip??.wav", lst., "o"
  if lst.0 = 0 then return /* nothing to do */
  do i = 1 to lst.0
    expected = "cdclip" || right(i, 2, '0') || ".wav"
    found = filespec('n', lst.i)
    if translate(expected) <> translate(found) then do
      "@rename" found expected
    end
  end
return /* renum_trks */


get_trackname:

  call sysfiletree "cdclip??.wav", lst., "o"
  if lst.0 > 98 then do
    Say "Maximum track number reached"
    exit
  end
  new = right(lst.0 + 1, 2, '0')
return "cdclip"new /* get_trackname */


find_prog:
procedure

   /* First, search in the program's directory */
   parse source . . me .
   pgm = stream(filespec('d', me) || filespec('p', me) || arg(1), 'c', 'query exist')
   if pgm = '' then do /* search in the path environment variable */
      pgm = syssearchpath( 'path', arg(1))
   end
return pgm /* find_prog */

get_devices: procedure expose cdrom. cdrw.

  parse arg cdrecord /* cdrecord.exe or cdrecord2.exe full path */
  cdrom. = ''
  cdrw. = ''
   /* Setup a local queue to avoid conflicts with other process */
   cdrqueue = rxqueue('create')
   oldq = rxqueue('set', cdrqueue)
   idev = 0

   "call" cdrecord "-scanbus 2>nul | rxqueue" cdrqueue

   /* Select all cd-rom devices */
   do queued()
      parse pull line
      if pos("Removable CD-ROM", line) = 0 then iterate
      idev = idev + 1
      line = strip(translate(line, '', '09'x))
      parse var line cd.idev' '."'"vendor.idev"'"."'"model.idev"'".
   end

   /* Get needed info for each cd-rom */
   do i = 1 to idev
     call get_devinfo cd.i vendor.i || model.i
   end
   oldq = rxqueue('set', oldq)
   cdrqueue = rxqueue('delete', cdrqueue)

   if cdrom.id = '' then do /* no cd-rom, only a cd-rw */
     cdrom.info = cdrw.info
     cdrom.speed = ''
     cdrom.id = cdrw.id
   end
return /* get_devices */


get_devinfo:

  parse arg dev cdinfo
   rs = 0
   ws = 0

   "call" cdrecord "dev="dev "-prcap  2>nul | rxqueue" cdrqueue
   do queued()
     parse pull ln
     key = translate(subword(ln, 1, 3))
     select
       when key = "MAXIMUM WRITE SPEED:" then do
         ws = format_speed(word(ln, 4))
       end

       when key = "MAXIMUM READ  SPEED:" then do
         rs = format_speed(word(ln, 4))
       end

       otherwise nop
     end /* select */
   end /* do queued() */

   if ws = 0 then do /* cd-rom */
     if cdrom.info <> '' then return /* get only the first cd-rom */
     if rs > 0 then do
       cdrom.speed = "speed="rs
     end
     cdrom.id = "dev="dev
     cdrom.info = cdinfo cdrom.id cdrom.speed
   end
   else do /* CD-RW */
     if cdrw.info <> '' then return /* get only the first cd-rw */
     cdrw.speed = "speed="ws
     cdrw.id = "dev="dev
     cdrw.info = cdinfo cdrw.id cdrw.speed
   end
return /* get_devinfo */


format_speed: procedure

  return  format(arg(1) / 176, , 0)
/* End CDCLIP  */
