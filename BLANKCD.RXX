/********************************************************************/
/*                                                                  */
/* BLANKCD Version 1.30                                             */
/* Author: Michel SUCH. Email: such.michel@wanadoo.fr               */
/*                                                                  */
/* Fast blanking of a rewritable cd.                                */
/* using CDRECORD or CDRECORD2                                      */
/*                                                                  */
/* This program requires CDRECORD/2 installed on your machine       */
/*                                                                  */
/* CDRECORD/2 can be obtained on HOBBES: http://hobbes.nmsu.edu     */
/*                                                                  */
/* CDRECORD.EXE or CDRECORD2.EXE must be located in a directory     */
/* defined in the path variable of the CONFIG.SYS file              */
/* or in the directory containing this program.                     */
/********************************************************************/

  call presentation
  call init_prog
  call blank_cd
exit rc


presentation:

  parse source . . me .
  progname = filespec('n', me)
  parse value(filespec('n', me)) with progname'.'.
   say progname "Version 1.30"
   say "Author: Michel SUCH, Email: such.michel@wanadoo.fr"
   say ""
return /* presentation */


init_prog:

/*------------------- Init Rexxutil-----------------------------------*/
   If RXFUNCQUERY('SysLoadFuncs') Then Do
      Call rxfuncadd 'SysLoadFuncs', 'REXXUTIL', 'SYSLOADFUNCS'
      Call sysloadfuncs
   End

   /* Check if we have all appropriate programs */
   cdrecord = find_prog("CDRECORD2.EXE")
   if cdrecord <> '' then cdrextra = '-n'
   else do
      cdrecord = find_prog("CDRECORD.EXE")
      if cdrecord = '' then do
         say "Cannot find program CDRECORD.EXE or CDRECORD2.EXE"
         exit -2
      end
      cdrextra = ''
   end

   call get_devices(cdrecord)
return /* init_prog */


blank_cd:

  do forever
    "call" cdrecord "blank=fast" cdrw.id cdrw.speed "-v" cdrextra
    select
      when rc = 0 then do
        say "Cd blanked successfully"
        leave
      end

      when rc = 255 then do
        call beep 440, 100
        say "Insert the cd to blank in the cd recorder"
        say "Press enter to continue, any other key to cancel"
        if sysgetkey("noecho") = '0d'x then iterate
        else do
          say "Operation cancelled"
          leave
        end
      end

      otherwise do
        say "Error blanking cd rc="rc
        leave
      end
    end /* select */
  end /* do forever */
return /* blank_cd */


find_prog:
procedure

   /* First, search in the program's directory */
   parse source . . me .
   pgm = stream(filespec('d', me) || filespec('p', me) || arg(1), 'c', 'query exist')
   if pgm = '' then do /* search in the path environment variable */
      pgm = syssearchpath( 'path', arg(1))
   end
return pgm /* find_prog */


get_devices: procedure expose cdrom. cdrw.

  parse arg cdrecord /* cdrecord.exe or cdrecord2.exe full path */
  cdrom. = ''
  cdrw. = ''
   /* Setup a local queue to avoid conflicts with other process */
   cdrqueue = rxqueue('create')
   oldq = rxqueue('set', cdrqueue)
   idev = 0

   "call" cdrecord "-scanbus 2>nul | rxqueue" cdrqueue

   /* Select all cd-rom devices */
   do queued()
      parse pull line
      if pos("Removable CD-ROM", line) = 0 then iterate
      idev = idev + 1
      line = strip(translate(line, '', '09'x))
      parse var line cd.idev' '."'"vendor.idev"'"."'"model.idev"'".
   end

   /* Get needed info for each cd-rom */
   do i = 1 to idev
     call get_devinfo cd.i vendor.i || model.i
   end
   oldq = rxqueue('set', oldq)
   cdrqueue = rxqueue('delete', cdrqueue)

   if cdrom.id = '' then do /* no cd-rom, only a cd-rw */
     cdrom.info = cdrw.info
     cdrom.speed = ''
     cdrom.id = cdrw.id
   end
return /* get_devices */


get_devinfo:

  parse arg dev cdinfo
   rs = 0
   ws = 0

   "call" cdrecord "dev="dev "-prcap  2>nul | rxqueue" cdrqueue
   do queued()
     parse pull ln
     key = translate(subword(ln, 1, 3))
     select
       when key = "MAXIMUM WRITE SPEED:" then do
         ws = format_speed(word(ln, 4))
       end

       when key = "MAXIMUM READ  SPEED:" then do
         rs = format_speed(word(ln, 4))
       end

       otherwise nop
     end /* select */
   end /* do queued() */

   if ws = 0 then do /* cd-rom */
     if cdrom.info <> '' then return /* get only the first cd-rom */
     if rs > 0 then do
       cdrom.speed = "speed="rs
     end
     cdrom.id = "dev="dev
     cdrom.info = cdinfo cdrom.id cdrom.speed
   end
   else do /* CD-RW */
     if cdrw.info <> '' then return /* get only the first cd-rw */
     cdrw.speed = "speed="ws
     cdrw.id = "dev="dev
     cdrw.info = cdinfo cdrw.id cdrw.speed
   end
return /* get_devinfo */


format_speed: procedure

  return  format(arg(1) / 176, , 0)
/* End BLANKCD */
